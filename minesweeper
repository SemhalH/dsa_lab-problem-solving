class Solution {
public:
    int R, C;
    int dr[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dc[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
    bool isValid(int r, int c) {
        return r >= 0 && r < R && c >= 0 && c < C;
    }
    int countAdjacentMines(const vector<vector<char>>& board, int r, int c) {
        int mineCount = 0;
        for (int i = 0; i < 8; ++i) {
            int nr = r + dr[i];
            int nc = c + dc[i]; 
            if (isValid(nr, nc) && board[nr][nc] == 'M') {
                mineCount++;
            }
        }
        return mineCount;
    }vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        R = board.size();
        if (R == 0) return board; 
        C = board[0].size();
        if (C == 0) return board; 

        int r0 = click[0]; 
        int c0 = click[1]; 
        if (board[r0][c0] == 'M') {
            board[r0][c0] = 'X';
            return board; 
        }
        queue<pair<int, int>> q;
        q.push({r0, c0}); 

        while (!q.empty()) {
            pair<int, int> current = q.front();
            q.pop();
            int r = current.first;
            int c = current.second;
            if (board[r][c] != 'E') {
                continue;
            }
            int mines = countAdjacentMines(board, r, c);

            if (mines > 0) {
                board[r][c] = (char)(mines + '0');
            } else {
                board[r][c] = 'B';
                for (int i = 0; i < 8; ++i) {
                    int nr = r + dr[i];
                    int nc = c + dc[i];
                    if (isValid(nr, nc) && board[nr][nc] == 'E') {
                        q.push({nr, nc});
                    }
                }
            }
        }

        return board;
    }
};
