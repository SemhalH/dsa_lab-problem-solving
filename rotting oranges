class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {  
        int rows = grid.size();
        int cols = grid[0].size();
        vector<vector<int>> gCopy = grid; 
        int numF = 0;
        queue<pair<int, int>> q;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (gCopy[i][j] == 2) {
                    q.push({i, j});
                } else if (gCopy[i][j] == 1) {
                    numF++;
                }
            }
        }
        int numM = -1; 
        vector<int> dr = {-1, 1, 0, 0};
        vector<int> dc = {0, 0, -1, 1};
        while (!q.empty()) {
            numM++; 
            int levelSize = q.size();
            for (int k = 0; k < levelSize; ++k) {
                auto [r, c] = q.front();
                q.pop();
                for (int i = 0; i < 4; ++i) {
                    int nr = r + dr[i];
                    int nc = c + dc[i];
                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && gCopy[nr][nc] == 1) {
                        gCopy[nr][nc] = 2;
                        numF--;  
                        q.push({nr, nc}); 
                    }
                }
            }
        }
        if (numF > 0) {
            return -1;
        }
        if (numM == -1) {
            return 0; 
        }
        return numM; 
    }
};
