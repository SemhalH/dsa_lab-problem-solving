class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        
        vector<vector<int>> visited(n, vector<int>(n, 0));

        if (grid[0][0] != 0 || grid[n - 1][n - 1] != 0) {
            return -1;
        }

        if (n == 1 && grid[0][0] == 0) {
            return 1;
        }

        :queue<pair<int, int>> q;
        
        q.push({0, 0});
        visited[0][0] = 1; 

        int res = 0;
        vector<pair<int, int>> directions = {
            {-1, -1}, {-1, 0}, {-1, 1},
            {0, -1},           {0, 1},
            {1, -1}, {1, 0}, {1, 1}
        };

        while (!q.empty()) {
            int m = q.size(); 
            for (int i = 0; i < m; i++) {
                auto [r, c] = q.front();
                q.pop();

                if (r == n - 1 && c == n - 1) {
                    return res + 1;
                }

                for (const auto& dir : directions) {
                    int new_r = r + dir.first;
                    int new_c = c + dir.second;

                
                    if (new_r >= 0 && new_r < n && new_c >= 0 && new_c < n &&
                        grid[new_r][new_c] == 0 && visited[new_r][new_c] == 0) {
                        
                        
                        visited[new_r][new_c] = 1;
                        q.push({new_r, new_c});
                    }
                }
            }
            res++; 
        }
        return -1;
    }
};
